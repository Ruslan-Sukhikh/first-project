#!groovy
// Update WP properties

properties([disableConcurrentBuilds()])


def WP = "https://wordpress.org/wordpress-5.6.zip"
def WORKDIR = "/var/www/html/"
//def CHECK = "'ssh root@${params.site} 'grep "wp_version = 5.6" /var/www/html/wp-includes/version.php' | awk -F "'" '{print $2}''"
//def WP_VER = "cat /var/lib/jenkins/jobs/Update_WP/wp_version.txt"

def remote = [:]
    remote.name = 'test'
    remote.host = ${params.site}
    remote.allowAnyHosts = true


parameters {
        string(Name: 'site', description: 'На каком сайте обновить WP')

}

pipeline {
    agent { 
        label 'master'
        }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }

    stages {
            stage("TEST") {
            steps {
                 sshCommand remote: remote, command: "ls"
            }
       }
//        stage("View ver WP") {
//            steps {
//                sh "ssh root@${params.site} 'grep "wp_version = " /var/www/html/wp-includes/version.php'
//            }
//        }
        stage("Check version WP") {
            steps {
               script {
                if ('$WP_VER' == '5.6') {
                echo "OK"
                    }else{
                    echo "Not OK"
                    }
                }
            }
        }

        stage("Download WP and Unzip") {
            steps {
                 sh "ssh root@${params.site} 'rm -rf /root/wordpress /root/latest.zip && wget $WP && unzip wordpress-5.6.zip' "
            }
        }
        stage("Update WP") {
            steps {
                sh "ssh root@${params.site} 'cd /root/ && cp -f -r  wordpress/. $WORKDIR' "
            }
        }
        stage("Change chown") {
            steps {
                sh "ssh root@${params.site} 'chown -R root:root $WORKDIR' "
            }
        }
    }
 }



def notifySlack(String buildStatus = 'STARTED') {
    // Build status of null means success.
    buildStatus = buildStatus ?: 'SUCCESS'

    def color

    if (buildStatus == 'STARTED') {
        color = '#D4DADF'
    } else if (buildStatus == 'SUCCESS') {
        color = '#BDFFC3'
    } else if (buildStatus == 'UNSTABLE') {
        color = '#FFFE89'
    } else {
        color = '#FF9FA1'
    }

    def msg = "${buildStatus}: `${env.JOB_NAME}` #${env.BUILD_NUMBER}:\n${env.BUILD_URL}"

    slackSend(color: color, message: msg)
}

node {
    try {
        notifySlack()

        // Existing build steps.
    } catch (e) {
        currentBuild.result = 'FAILURE'
        throw e
    } finally {
        notifySlack(currentBuild.result)
    }
}
