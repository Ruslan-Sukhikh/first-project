#!groovy
// Update WP properties

properties([disableConcurrentBuilds()])


def WP = "https://wordpress.org/latest.zip"
def WORKDIR = "/var/www/html/"


parameters {
        string(Name: 'site', description: 'На каком сайте обновить WP')

}

pipeline {
    agent { 
        label 'master'
        }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }

    def response = httpRequest "http://${params.site}"

    stages {
        stage("Download WP and Unzip") {
            steps {
                sh "ssh root@${params.site} 'rm -rf /root/wordpress /root/latest.zip && wget $WP && unzip latest.zip' "
            }
        }
        stage("Update WP") {
            steps {
                sh "ssh root@${params.site} 'cd /root/ && cp -f -r  wordpress/. $WORKDIR' "
            }
        }
        stage("Change chown") {
            steps {
                sh "ssh root@${params.site} 'chown -R root:root $WORKDIR' "
            }
        }
        stage("Check site") {
            steps {
                println('Status: '+response.status)
                println('Response: '+response.content)
            }
        }
    }
}



def notifySlack(String buildStatus = 'STARTED') {
    // Build status of null means success.
    buildStatus = buildStatus ?: 'SUCCESS'

    def color

    if (buildStatus == 'STARTED') {
        color = '#D4DADF'
    } else if (buildStatus == 'SUCCESS') {
        color = '#BDFFC3'
    } else if (buildStatus == 'UNSTABLE') {
        color = '#FFFE89'
    } else {
        color = '#FF9FA1'
    }

    def msg = "${buildStatus}: `${env.JOB_NAME}` #${env.BUILD_NUMBER}:\n${env.BUILD_URL}"

    slackSend(color: color, message: msg)
}

node {
    try {
        notifySlack()

        // Existing build steps.
    } catch (e) {
        currentBuild.result = 'FAILURE'
        throw e
    } finally {
        notifySlack(currentBuild.result)
    }
}
